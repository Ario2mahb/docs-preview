import{c as n}from"./chunks/constants.6b678d01.js";import{o as l,c as p,k as s,t as e,l as t,a as o,Q as a}from"./chunks/framework.5711f494.js";const c="/docs-preview/pr-1490/img/nodes/full-consensus-node.png",i="/docs-preview/pr-1490/img/nodes/validator.png",r=a('<h1 id="setting-up-a-celestia-full-consensus-node" tabindex="-1">Setting up a Celestia full consensus node <a class="header-anchor" href="#setting-up-a-celestia-full-consensus-node" aria-label="Permalink to &quot;Setting up a Celestia full consensus node&quot;">​</a></h1><p>This guide covers how to set up a full consensus node or a validator node on Celestia. Full consensus nodes allow you to sync blockchain history in the Celestia consensus layer.</p><p><img src="'+c+`" alt="full consensus node"></p><nav class="table-of-contents"><ul><li><a href="#hardware-requirements">Hardware requirements</a></li><li><a href="#setting-up-a-full-consensus-node">Setting up a full consensus node</a><ul><li><a href="#setup-the-dependencies">Setup the dependencies</a></li><li><a href="#install-celestia-app">Install celestia-app</a></li><li><a href="#setup-the-p2p-networks">Setup the P2P networks</a></li></ul></li><li><a href="#storage-and-pruning-configurations">Storage and pruning configurations</a><ul><li><a href="#connecting-a-consensus-node-to-a-bridge-node">Connecting a consensus node to a bridge node</a></li><li><a href="#querying-transactions-by-hash">Querying transactions by hash</a></li><li><a href="#accessing-historical-state">Accessing historical state</a></li><li><a href="#saving-on-storage-requirements">Saving on storage requirements</a></li></ul></li><li><a href="#syncing">Syncing</a><ul><li><a href="#state-sync">State sync</a></li><li><a href="#quick-sync">Quick sync</a></li></ul></li><li><a href="#start-the-consensus-node">Start the consensus node</a></li><li><a href="#optional-setting-up-a-validator">Optional: Setting up a validator</a><ul><li><a href="#setting-up-a-celestia-validator-node">Setting up a Celestia validator node</a></li><li><a href="#optional-deploy-the-celestia-node">Optional: Deploy the celestia-node</a></li><li><a href="#run-the-validator-node">Run the validator node</a></li><li><a href="#submit-your-validator-information">Submit your validator information</a></li></ul></li><li><a href="#extra-resources-for-consensus-nodes">Extra resources for consensus nodes</a><ul><li><a href="#optional-reset-network">Optional: Reset network</a></li><li><a href="#optional-configuring-an-rpc-endpoint">Optional: Configuring an RPC endpoint</a></li><li><a href="#optional-transaction-indexer-configuration-options">Optional: Transaction indexer configuration options</a></li><li><a href="#optional-discard-abci-responses-configuration">Optional: Discard ABCI responses configuration</a></li></ul></li></ul></nav><h2 id="hardware-requirements" tabindex="-1">Hardware requirements <a class="header-anchor" href="#hardware-requirements" aria-label="Permalink to &quot;Hardware requirements&quot;">​</a></h2><p>The following hardware minimum requirements are recommended for running a full consensus node:</p><ul><li>Memory: <strong>8 GB RAM</strong></li><li>CPU: <strong>Quad-Core</strong></li><li>Disk: <strong>250 GB SSD Storage</strong></li><li>Bandwidth: <strong>1 Gbps for Download/1 Gbps for Upload</strong></li></ul><p>Running a full consensus node requires significant storage capacity to store the entire blockchain history. As of the latest recommendation, it is advisable to have at least 250 GB of SSD storage for a Celestia full consensus node if you are using pruning. If you are not using pruning, you are running an archive node, and it is recommended to have 500 GB of SSD storage. Please ensure that your storage meets this requirement to ensure smooth syncing and operation of the node.</p><h2 id="setting-up-a-full-consensus-node" tabindex="-1">Setting up a full consensus node <a class="header-anchor" href="#setting-up-a-full-consensus-node" aria-label="Permalink to &quot;Setting up a full consensus node&quot;">​</a></h2><p>The following tutorial is done on an Ubuntu Linux 20.04 (LTS) x64 instance machine.</p><h3 id="setup-the-dependencies" tabindex="-1">Setup the dependencies <a class="header-anchor" href="#setup-the-dependencies" aria-label="Permalink to &quot;Setup the dependencies&quot;">​</a></h3><p>Follow the instructions on <a href="./environment">installing dependencies</a>.</p><h3 id="install-celestia-app" tabindex="-1">Install celestia-app <a class="header-anchor" href="#install-celestia-app" aria-label="Permalink to &quot;Install celestia-app&quot;">​</a></h3><p>Follow the tutorial on <a href="./celestia-app">installing <code>celestia-app</code></a>.</p><h3 id="setup-the-p2p-networks" tabindex="-1">Setup the P2P networks <a class="header-anchor" href="#setup-the-p2p-networks" aria-label="Permalink to &quot;Setup the P2P networks&quot;">​</a></h3><p>Now we will setup the P2P Networks by cloning the networks repository:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $HOME</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">networks</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/celestiaorg/networks.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $HOME</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">networks</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/celestiaorg/networks.git</span></span></code></pre></div><p>To initialize the network pick a &quot;node-name&quot; that describes your node. Keep in mind that this might change if a new testnet is deployed.</p>`,18),_={class:"vp-code-group vp-adaptive-theme"},d=a('<div class="tabs"><input type="radio" name="group-uq6el" id="tab-CP-M0da" checked="checked"><label for="tab-CP-M0da">Mainnet Beta</label><input type="radio" name="group-uq6el" id="tab-wqua5nC"><label for="tab-wqua5nC">Mocha</label><input type="radio" name="group-uq6el" id="tab-1fhU6Cb"><label for="tab-1fhU6Cb">Arabica</label></div>',1),h={class:"blocks"},y={class:"language-bash vp-adaptive-theme active"},E=s("button",{title:"Copy Code",class:"copy"},null,-1),u=s("span",{class:"lang"},"bash",-1),F={class:"shiki github-dark vp-code-dark"},C={class:"line"},g=a('<span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node-name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--chain-id</span><span style="color:#E1E4E8;"> </span>',8),T={style:{color:"#9ECBFF"}},b={class:"shiki github-light vp-code-light"},S={class:"line"},m=a('<span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node-name&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--chain-id</span><span style="color:#24292E;"> </span>',8),A={style:{color:"#032F62"}},v={class:"language-bash vp-adaptive-theme"},f=s("button",{title:"Copy Code",class:"copy"},null,-1),k=s("span",{class:"lang"},"bash",-1),B={class:"shiki github-dark vp-code-dark"},q={class:"line"},P=a('<span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node-name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--chain-id</span><span style="color:#E1E4E8;"> </span>',8),I={style:{color:"#9ECBFF"}},V={class:"shiki github-light vp-code-light"},w={class:"line"},D=a('<span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node-name&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--chain-id</span><span style="color:#24292E;"> </span>',8),R={style:{color:"#032F62"}},N={class:"language-bash vp-adaptive-theme"},x=s("button",{title:"Copy Code",class:"copy"},null,-1),$=s("span",{class:"lang"},"bash",-1),O={class:"shiki github-dark vp-code-dark"},M={class:"line"},L=a('<span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node-name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--chain-id</span><span style="color:#E1E4E8;"> </span>',8),H={style:{color:"#9ECBFF"}},U={class:"shiki github-light vp-code-light"},W={class:"line"},Y=a('<span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node-name&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--chain-id</span><span style="color:#24292E;"> </span>',8),G={style:{color:"#032F62"}},K=s("p",null,[o("Download the "),s("code",null,"genesis.json"),o(" file:")],-1),Q={class:"vp-code-group vp-adaptive-theme"},z=a('<div class="tabs"><input type="radio" name="group-HqMn8" id="tab-M_LMml9" checked="checked"><label for="tab-M_LMml9">Mainnet Beta</label><input type="radio" name="group-HqMn8" id="tab-Dxwy-it"><label for="tab-Dxwy-it">Mocha</label><input type="radio" name="group-HqMn8" id="tab-abnDCiH"><label for="tab-abnDCiH">Arabica</label></div>',1),X={class:"blocks"},Z={class:"language-bash vp-adaptive-theme active"},j=s("button",{title:"Copy Code",class:"copy"},null,-1),J=s("span",{class:"lang"},"bash",-1),ss={class:"shiki github-dark vp-code-dark"},as={class:"line"},os=s("span",{style:{color:"#B392F0"}},"celestia-appd",-1),ns=s("span",{style:{color:"#E1E4E8"}}," ",-1),es=s("span",{style:{color:"#9ECBFF"}},"download-genesis",-1),ts=s("span",{style:{color:"#E1E4E8"}}," ",-1),ls={style:{color:"#9ECBFF"}},ps={class:"shiki github-light vp-code-light"},cs={class:"line"},is=s("span",{style:{color:"#6F42C1"}},"celestia-appd",-1),rs=s("span",{style:{color:"#24292E"}}," ",-1),_s=s("span",{style:{color:"#032F62"}},"download-genesis",-1),ds=s("span",{style:{color:"#24292E"}}," ",-1),hs={style:{color:"#032F62"}},ys={class:"language-bash vp-adaptive-theme"},Es=s("button",{title:"Copy Code",class:"copy"},null,-1),us=s("span",{class:"lang"},"bash",-1),Fs={class:"shiki github-dark vp-code-dark"},Cs={class:"line"},gs=s("span",{style:{color:"#B392F0"}},"celestia-appd",-1),Ts=s("span",{style:{color:"#E1E4E8"}}," ",-1),bs=s("span",{style:{color:"#9ECBFF"}},"download-genesis",-1),Ss=s("span",{style:{color:"#E1E4E8"}}," ",-1),ms={style:{color:"#9ECBFF"}},As={class:"shiki github-light vp-code-light"},vs={class:"line"},fs=s("span",{style:{color:"#6F42C1"}},"celestia-appd",-1),ks=s("span",{style:{color:"#24292E"}}," ",-1),Bs=s("span",{style:{color:"#032F62"}},"download-genesis",-1),qs=s("span",{style:{color:"#24292E"}}," ",-1),Ps={style:{color:"#032F62"}},Is={class:"language-bash vp-adaptive-theme"},Vs=s("button",{title:"Copy Code",class:"copy"},null,-1),ws=s("span",{class:"lang"},"bash",-1),Ds={class:"shiki github-dark vp-code-dark"},Rs={class:"line"},Ns=s("span",{style:{color:"#B392F0"}},"celestia-appd",-1),xs=s("span",{style:{color:"#E1E4E8"}}," ",-1),$s=s("span",{style:{color:"#9ECBFF"}},"download-genesis",-1),Os=s("span",{style:{color:"#E1E4E8"}}," ",-1),Ms={style:{color:"#9ECBFF"}},Ls={class:"shiki github-light vp-code-light"},Hs={class:"line"},Us=s("span",{style:{color:"#6F42C1"}},"celestia-appd",-1),Ws=s("span",{style:{color:"#24292E"}}," ",-1),Ys=s("span",{style:{color:"#032F62"}},"download-genesis",-1),Gs=s("span",{style:{color:"#24292E"}}," ",-1),Ks={style:{color:"#032F62"}},Qs=s("p",null,[o("Set seeds in the "),s("code",null,"$HOME/.celestia-app/config/config.toml"),o(" file:")],-1),zs={class:"vp-code-group vp-adaptive-theme"},Xs=a('<div class="tabs"><input type="radio" name="group-kWFNh" id="tab-UQVd5hy" checked="checked"><label for="tab-UQVd5hy">Mainnet Beta</label><input type="radio" name="group-kWFNh" id="tab-_F1E4XH"><label for="tab-_F1E4XH">Mocha</label><input type="radio" name="group-kWFNh" id="tab-KNHIA3Z"><label for="tab-KNHIA3Z">Arabica</label></div>',1),Zs={class:"blocks"},js={class:"language-bash vp-adaptive-theme active"},Js=s("button",{title:"Copy Code",class:"copy"},null,-1),sa=s("span",{class:"lang"},"bash",-1),aa={class:"shiki github-dark vp-code-dark"},oa={class:"line"},na=a('<span style="color:#E1E4E8;">SEEDS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-sL</span>',6),ea={style:{color:"#9ECBFF"}},ta=s("span",{style:{color:"#F97583"}},"|",-1),la=s("span",{style:{color:"#9ECBFF"}}," ",-1),pa=s("span",{style:{color:"#B392F0"}},"tr",-1),ca=s("span",{style:{color:"#9ECBFF"}}," '\\n' ',')",-1),ia=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"echo"),s("span",{style:{color:"#E1E4E8"}}," $SEEDS")],-1),ra=a('<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i.bak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;s/^seeds *=.*/seeds = </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$SEEDS</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/.celestia-app/config/config.toml</span></span>',1),_a={class:"shiki github-light vp-code-light"},da={class:"line"},ha=a('<span style="color:#24292E;">SEEDS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-sL</span>',6),ya={style:{color:"#032F62"}},Ea=s("span",{style:{color:"#D73A49"}},"|",-1),ua=s("span",{style:{color:"#032F62"}}," ",-1),Fa=s("span",{style:{color:"#6F42C1"}},"tr",-1),Ca=s("span",{style:{color:"#032F62"}}," '\\n' ',')",-1),ga=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"echo"),s("span",{style:{color:"#24292E"}}," $SEEDS")],-1),Ta=a('<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i.bak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;s/^seeds *=.*/seeds = </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$SEEDS</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">/&quot;</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/.celestia-app/config/config.toml</span></span>',1),ba={class:"language-bash vp-adaptive-theme"},Sa=s("button",{title:"Copy Code",class:"copy"},null,-1),ma=s("span",{class:"lang"},"bash",-1),Aa={class:"shiki github-dark vp-code-dark"},va={class:"line"},fa=a('<span style="color:#E1E4E8;">SEEDS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-sL</span>',6),ka={style:{color:"#9ECBFF"}},Ba=s("span",{style:{color:"#F97583"}},"|",-1),qa=s("span",{style:{color:"#9ECBFF"}}," ",-1),Pa=s("span",{style:{color:"#B392F0"}},"tr",-1),Ia=s("span",{style:{color:"#9ECBFF"}}," '\\n' ',')",-1),Va=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"echo"),s("span",{style:{color:"#E1E4E8"}}," $SEEDS")],-1),wa=a('<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i.bak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;s/^seeds *=.*/seeds = </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$SEEDS</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/.celestia-app/config/config.toml</span></span>',1),Da={class:"shiki github-light vp-code-light"},Ra={class:"line"},Na=a('<span style="color:#24292E;">SEEDS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-sL</span>',6),xa={style:{color:"#032F62"}},$a=s("span",{style:{color:"#D73A49"}},"|",-1),Oa=s("span",{style:{color:"#032F62"}}," ",-1),Ma=s("span",{style:{color:"#6F42C1"}},"tr",-1),La=s("span",{style:{color:"#032F62"}}," '\\n' ',')",-1),Ha=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"echo"),s("span",{style:{color:"#24292E"}}," $SEEDS")],-1),Ua=a('<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i.bak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;s/^seeds *=.*/seeds = </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$SEEDS</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">/&quot;</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/.celestia-app/config/config.toml</span></span>',1),Wa=a(`<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># For Arabica, you can set seeds manually in the</span></span>
<span class="line"><span style="color:#6A737D;"># \`$HOME/.celestia-app/config/config.toml\` file:</span></span>
<span class="line"><span style="color:#6A737D;"># Comma separated list of seed nodes to connect to</span></span>
<span class="line"><span style="color:#B392F0;">seeds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># For Arabica, you can set seeds manually in the</span></span>
<span class="line"><span style="color:#6A737D;"># \`$HOME/.celestia-app/config/config.toml\` file:</span></span>
<span class="line"><span style="color:#6A737D;"># Comma separated list of seed nodes to connect to</span></span>
<span class="line"><span style="color:#6F42C1;">seeds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span></code></pre></div>`,1),Ya=s("p",null,[s("strong",null,"Optionally"),o(", you can set persistent peers in your "),s("code",null,"config.toml"),o(" file. You can get the persistent peers from the networks repository with the following commands:")],-1),Ga=s("p",null,"Setting persistent peers is advised only if you are running a sentry node.",-1),Ka={class:"vp-code-group vp-adaptive-theme"},Qa=a('<div class="tabs"><input type="radio" name="group-CdVxr" id="tab-lLVZfMO" checked="checked"><label for="tab-lLVZfMO">Mainnet Beta</label><input type="radio" name="group-CdVxr" id="tab-qOrJyUp"><label for="tab-qOrJyUp">Mocha</label><input type="radio" name="group-CdVxr" id="tab-ttZhOpl"><label for="tab-ttZhOpl">Arabica</label></div>',1),za={class:"blocks"},Xa={class:"language-bash vp-adaptive-theme active"},Za=s("button",{title:"Copy Code",class:"copy"},null,-1),ja=s("span",{class:"lang"},"bash",-1),Ja={class:"shiki github-dark vp-code-dark"},so={class:"line"},ao=a('<span style="color:#E1E4E8;">PERSISTENT_PEERS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-sL</span>',6),oo={style:{color:"#9ECBFF"}},no=s("span",{style:{color:"#F97583"}},"|",-1),eo=s("span",{style:{color:"#9ECBFF"}}," ",-1),to=s("span",{style:{color:"#B392F0"}},"tr",-1),lo=s("span",{style:{color:"#9ECBFF"}}," '\\n' ',')",-1),po=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"echo"),s("span",{style:{color:"#E1E4E8"}}," $PERSISTENT_PEERS")],-1),co=a('<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i.bak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;s/^persistent_peers *=.*/persistent_peers = </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$PERSISTENT_PEERS</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/.celestia-app/config/config.toml</span></span>',1),io={class:"shiki github-light vp-code-light"},ro={class:"line"},_o=a('<span style="color:#24292E;">PERSISTENT_PEERS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-sL</span>',6),ho={style:{color:"#032F62"}},yo=s("span",{style:{color:"#D73A49"}},"|",-1),Eo=s("span",{style:{color:"#032F62"}}," ",-1),uo=s("span",{style:{color:"#6F42C1"}},"tr",-1),Fo=s("span",{style:{color:"#032F62"}}," '\\n' ',')",-1),Co=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"echo"),s("span",{style:{color:"#24292E"}}," $PERSISTENT_PEERS")],-1),go=a('<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i.bak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;s/^persistent_peers *=.*/persistent_peers = </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$PERSISTENT_PEERS</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">/&quot;</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/.celestia-app/config/config.toml</span></span>',1),To={class:"language-bash vp-adaptive-theme"},bo=s("button",{title:"Copy Code",class:"copy"},null,-1),So=s("span",{class:"lang"},"bash",-1),mo={class:"shiki github-dark vp-code-dark"},Ao={class:"line"},vo=a('<span style="color:#E1E4E8;">PERSISTENT_PEERS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-sL</span>',6),fo={style:{color:"#9ECBFF"}},ko=s("span",{style:{color:"#F97583"}},"|",-1),Bo=s("span",{style:{color:"#9ECBFF"}}," ",-1),qo=s("span",{style:{color:"#B392F0"}},"tr",-1),Po=s("span",{style:{color:"#9ECBFF"}}," '\\n' ',')",-1),Io=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"echo"),s("span",{style:{color:"#E1E4E8"}}," $PERSISTENT_PEERS")],-1),Vo=a('<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i.bak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;s/^persistent_peers *=.*/persistent_peers = </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$PERSISTENT_PEERS</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/.celestia-app/config/config.toml</span></span>',1),wo={class:"shiki github-light vp-code-light"},Do={class:"line"},Ro=a('<span style="color:#24292E;">PERSISTENT_PEERS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-sL</span>',6),No={style:{color:"#032F62"}},xo=s("span",{style:{color:"#D73A49"}},"|",-1),$o=s("span",{style:{color:"#032F62"}}," ",-1),Oo=s("span",{style:{color:"#6F42C1"}},"tr",-1),Mo=s("span",{style:{color:"#032F62"}}," '\\n' ',')",-1),Lo=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"echo"),s("span",{style:{color:"#24292E"}}," $PERSISTENT_PEERS")],-1),Ho=a('<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i.bak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;s/^persistent_peers *=.*/persistent_peers = </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$PERSISTENT_PEERS</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">/&quot;</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/.celestia-app/config/config.toml</span></span>',1),Uo={class:"language-bash vp-adaptive-theme"},Wo=s("button",{title:"Copy Code",class:"copy"},null,-1),Yo=s("span",{class:"lang"},"bash",-1),Go={class:"shiki github-dark vp-code-dark"},Ko={class:"line"},Qo=a('<span style="color:#E1E4E8;">PERSISTENT_PEERS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-sL</span>',6),zo={style:{color:"#9ECBFF"}},Xo=s("span",{style:{color:"#F97583"}},"|",-1),Zo=s("span",{style:{color:"#9ECBFF"}}," ",-1),jo=s("span",{style:{color:"#B392F0"}},"tr",-1),Jo=s("span",{style:{color:"#9ECBFF"}}," '\\n' ',')",-1),sn=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"echo"),s("span",{style:{color:"#E1E4E8"}}," $PERSISTENT_PEERS")],-1),an=a('<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i.bak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;s/^persistent_peers *=.*/persistent_peers = </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$PERSISTENT_PEERS</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/.celestia-app/config/config.toml</span></span>',1),on={class:"shiki github-light vp-code-light"},nn={class:"line"},en=a('<span style="color:#24292E;">PERSISTENT_PEERS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-sL</span>',6),tn={style:{color:"#032F62"}},ln=s("span",{style:{color:"#D73A49"}},"|",-1),pn=s("span",{style:{color:"#032F62"}}," ",-1),cn=s("span",{style:{color:"#6F42C1"}},"tr",-1),rn=s("span",{style:{color:"#032F62"}}," '\\n' ',')",-1),_n=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"echo"),s("span",{style:{color:"#24292E"}}," $PERSISTENT_PEERS")],-1),dn=a('<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i.bak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;s/^persistent_peers *=.*/persistent_peers = </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$PERSISTENT_PEERS</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">/&quot;</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/.celestia-app/config/config.toml</span></span>',1),hn=a(`<h2 id="storage-and-pruning-configurations" tabindex="-1">Storage and pruning configurations <a class="header-anchor" href="#storage-and-pruning-configurations" aria-label="Permalink to &quot;Storage and pruning configurations&quot;">​</a></h2><h3 id="connecting-a-consensus-node-to-a-bridge-node" tabindex="-1">Connecting a consensus node to a bridge node <a class="header-anchor" href="#connecting-a-consensus-node-to-a-bridge-node" aria-label="Permalink to &quot;Connecting a consensus node to a bridge node&quot;">​</a></h3><p>If your consensus node is being connected to a celestia-node bridge node, you will need to enable transaction indexing and retain all block data. This can be achieved with the following settings in your <code>config.toml</code>.</p><h4 id="enable-transaction-indexing" tabindex="-1">Enable transaction indexing <a class="header-anchor" href="#enable-transaction-indexing" aria-label="Permalink to &quot;Enable transaction indexing&quot;">​</a></h4><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">indexer = </span><span style="color:#9ECBFF;">&quot;kv&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">indexer = </span><span style="color:#032F62;">&quot;kv&quot;</span></span></code></pre></div><h4 id="retain-all-block-data" tabindex="-1">Retain all block data <a class="header-anchor" href="#retain-all-block-data" aria-label="Permalink to &quot;Retain all block data&quot;">​</a></h4><p>And in your <code>app.toml</code>, <code>min-retain-blocks</code> should remain as the default setting of <code>0</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">min-retain-blocks = </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># retain all block data, this is default setting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">min-retain-blocks = </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># retain all block data, this is default setting</span></span></code></pre></div><h3 id="querying-transactions-by-hash" tabindex="-1">Querying transactions by hash <a class="header-anchor" href="#querying-transactions-by-hash" aria-label="Permalink to &quot;Querying transactions by hash&quot;">​</a></h3><p>If you want to query transactions using their hash, transaction indexing must be turned on. Set the <code>indexer</code> to <code>&quot;kv&quot;</code> in your <code>config.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">indexer = </span><span style="color:#9ECBFF;">&quot;kv&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">indexer = </span><span style="color:#032F62;">&quot;kv&quot;</span></span></code></pre></div><h3 id="accessing-historical-state" tabindex="-1">Accessing historical state <a class="header-anchor" href="#accessing-historical-state" aria-label="Permalink to &quot;Accessing historical state&quot;">​</a></h3><p>If you want to query the historical state — for example, you might want to know the balance of a Celestia wallet at a given height in the past — you should run an archive node with <code>pruning = &quot;nothing&quot;</code> in your <code>app.toml</code>. Note that this configuration is resource-intensive and will require significant storage:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pruning = </span><span style="color:#9ECBFF;">&quot;nothing&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pruning = </span><span style="color:#032F62;">&quot;nothing&quot;</span></span></code></pre></div><h3 id="saving-on-storage-requirements" tabindex="-1">Saving on storage requirements <a class="header-anchor" href="#saving-on-storage-requirements" aria-label="Permalink to &quot;Saving on storage requirements&quot;">​</a></h3><p>If you want to save on storage requirements, consider using <code>pruning = &quot;everything&quot;</code> in your <code>app.toml</code> to prune everything. If you select <code>&quot;everything&quot;</code> or <code>&quot;default&quot;</code>, but still want to keep the block data, you can do so by not changing the default value of <code>min-retain-blocks = 0</code> in your <code>app.toml</code>. A value of <code>0</code> for <code>min-retain-blocks</code> will keep all block data. This will prune snapshots of the state, but it will keep block data:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pruning = </span><span style="color:#9ECBFF;">&quot;everything&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">min-retain-blocks = </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># this is the default setting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pruning = </span><span style="color:#032F62;">&quot;everything&quot;</span></span>
<span class="line"><span style="color:#24292E;">min-retain-blocks = </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># this is the default setting</span></span></code></pre></div><h2 id="syncing" tabindex="-1">Syncing <a class="header-anchor" href="#syncing" aria-label="Permalink to &quot;Syncing&quot;">​</a></h2><p>By default, a consensus node will sync using block sync; that is request, validate and execute every block up to the head of the blockchain. This is the most secure mechanism yet the slowest (taking up to days depending on the height of the blockchain).</p><p>There are two alternatives for quicker syncing.</p><h3 id="state-sync" tabindex="-1">State sync <a class="header-anchor" href="#state-sync" aria-label="Permalink to &quot;State sync&quot;">​</a></h3><p>State sync uses light client verification to verify state snapshots from peers and then apply them. State sync relies on weak subjectivity; a trusted header (specifically the hash and height) must be provided. This can be found by querying a trusted RPC endpoint (/block). RPC endpoints are also required for retrieving light blocks. These can be found in the docs here under the respective networks or from <a href="https://github.com/cosmos/chain-registry" target="_blank" rel="noreferrer">the chain-registry</a>.</p><p>In <code>$HOME/.celestia-app/config/config.toml</code>, set</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rpc_servers = </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">trust_height = </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">trust_hash = </span><span style="color:#9ECBFF;">&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rpc_servers = </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">trust_height = </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">trust_hash = </span><span style="color:#032F62;">&quot;&quot;</span></span></code></pre></div><p>to their respective fields. At least two different rpc endpoints should be provided. The more, the greater the chance of detecting any fraudulent behavior.</p><p>Once setup, you should be ready to start the node as normal. In the logs, you should see: <code>Discovering snapshots</code>. This may take a few minutes before snapshots are found depending on the network topology.</p><h3 id="quick-sync" tabindex="-1">Quick sync <a class="header-anchor" href="#quick-sync" aria-label="Permalink to &quot;Quick sync&quot;">​</a></h3><p>Quick sync effectively downloads the entire <code>data</code> directory from a third-party provider meaning the node has all the application and blockchain state as the node it was copied from.</p><p>Run the following command to quick-sync from a snapshot:</p>`,29),yn={class:"vp-code-group vp-adaptive-theme"},En=a('<div class="tabs"><input type="radio" name="group-sp2An" id="tab-ddKcqKU" checked="checked"><label for="tab-ddKcqKU">Mainnet Beta</label><input type="radio" name="group-sp2An" id="tab-cr0YLjG"><label for="tab-cr0YLjG">Mocha</label><input type="radio" name="group-sp2An" id="tab-r3Yb4U1"><label for="tab-r3Yb4U1">Arabica</label></div>',1),un={class:"blocks"},Fn={class:"language-bash vp-adaptive-theme active"},Cn=s("button",{title:"Copy Code",class:"copy"},null,-1),gn=s("span",{class:"lang"},"bash",-1),Tn={class:"shiki github-dark vp-code-dark"},bn=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"cd"),s("span",{style:{color:"#E1E4E8"}}," $HOME")],-1),Sn=a('<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data</span></span>',1),mn=a('<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data</span></span>',1),An=a('<span class="line"><span style="color:#E1E4E8;">SNAP_NAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#9ECBFF;"> https://snaps.qubelabs.io/celestia/ </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\</span></span>',1),vn={class:"line"},fn=s("span",{style:{color:"#9ECBFF"}},"    ",-1),kn=s("span",{style:{color:"#B392F0"}},"egrep",-1),Bn=s("span",{style:{color:"#9ECBFF"}}," ",-1),qn=s("span",{style:{color:"#79B8FF"}},"-o",-1),Pn={style:{color:"#9ECBFF"}},In=a('<span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">tr</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#9ECBFF;"> &quot;&gt;&quot;)</span>',6),Vn=a('<span class="line"><span style="color:#B392F0;">aria2c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-x</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-snap.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://snaps.qubelabs.io/celestia/${</span><span style="color:#E1E4E8;">SNAP_NAME</span><span style="color:#9ECBFF;">}&quot;</span></span>',1),wn=a('<span class="line"><span style="color:#B392F0;">tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-snap.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-C</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data/</span></span>',1),Dn={class:"shiki github-light vp-code-light"},Rn=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"cd"),s("span",{style:{color:"#24292E"}}," $HOME")],-1),Nn=a('<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data</span></span>',1),xn=a('<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data</span></span>',1),$n=a('<span class="line"><span style="color:#24292E;">SNAP_NAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-s</span><span style="color:#032F62;"> https://snaps.qubelabs.io/celestia/ </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\</span></span>',1),On={class:"line"},Mn=s("span",{style:{color:"#032F62"}},"    ",-1),Ln=s("span",{style:{color:"#6F42C1"}},"egrep",-1),Hn=s("span",{style:{color:"#032F62"}}," ",-1),Un=s("span",{style:{color:"#005CC5"}},"-o",-1),Wn={style:{color:"#032F62"}},Yn=a('<span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">tr</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-d</span><span style="color:#032F62;"> &quot;&gt;&quot;)</span>',6),Gn=a('<span class="line"><span style="color:#6F42C1;">aria2c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-x</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-snap.tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://snaps.qubelabs.io/celestia/${</span><span style="color:#24292E;">SNAP_NAME</span><span style="color:#032F62;">}&quot;</span></span>',1),Kn=a('<span class="line"><span style="color:#6F42C1;">tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-snap.tar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-C</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data/</span></span>',1),Qn={class:"language-bash vp-adaptive-theme"},zn=s("button",{title:"Copy Code",class:"copy"},null,-1),Xn=s("span",{class:"lang"},"bash",-1),Zn={class:"shiki github-dark vp-code-dark"},jn=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"cd"),s("span",{style:{color:"#E1E4E8"}}," $HOME")],-1),Jn=a('<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data</span></span>',1),se=a('<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data</span></span>',1),ae=a('<span class="line"><span style="color:#E1E4E8;">SNAP_NAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#9ECBFF;"> https://snaps.qubelabs.io/celestia/ </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\</span></span>',1),oe={class:"line"},ne=s("span",{style:{color:"#9ECBFF"}},"    ",-1),ee=s("span",{style:{color:"#B392F0"}},"egrep",-1),te=s("span",{style:{color:"#9ECBFF"}}," ",-1),le=s("span",{style:{color:"#79B8FF"}},"-o",-1),pe={style:{color:"#9ECBFF"}},ce=a('<span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">tr</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#9ECBFF;"> &quot;&gt;&quot;)</span>',6),ie=a('<span class="line"><span style="color:#B392F0;">aria2c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-x</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-snap.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://snaps.qubelabs.io/celestia/${</span><span style="color:#E1E4E8;">SNAP_NAME</span><span style="color:#9ECBFF;">}&quot;</span></span>',1),re=a('<span class="line"><span style="color:#B392F0;">tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-snap.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-C</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data/</span></span>',1),_e={class:"shiki github-light vp-code-light"},de=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"cd"),s("span",{style:{color:"#24292E"}}," $HOME")],-1),he=a('<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data</span></span>',1),ye=a('<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data</span></span>',1),Ee=a('<span class="line"><span style="color:#24292E;">SNAP_NAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-s</span><span style="color:#032F62;"> https://snaps.qubelabs.io/celestia/ </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\</span></span>',1),ue={class:"line"},Fe=s("span",{style:{color:"#032F62"}},"    ",-1),Ce=s("span",{style:{color:"#6F42C1"}},"egrep",-1),ge=s("span",{style:{color:"#032F62"}}," ",-1),Te=s("span",{style:{color:"#005CC5"}},"-o",-1),be={style:{color:"#032F62"}},Se=a('<span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">tr</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-d</span><span style="color:#032F62;"> &quot;&gt;&quot;)</span>',6),me=a('<span class="line"><span style="color:#6F42C1;">aria2c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-x</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-snap.tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://snaps.qubelabs.io/celestia/${</span><span style="color:#24292E;">SNAP_NAME</span><span style="color:#032F62;">}&quot;</span></span>',1),Ae=a('<span class="line"><span style="color:#6F42C1;">tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-snap.tar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-C</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data/</span></span>',1),ve={class:"language-bash vp-adaptive-theme"},fe=s("button",{title:"Copy Code",class:"copy"},null,-1),ke=s("span",{class:"lang"},"bash",-1),Be={class:"shiki github-dark vp-code-dark"},qe=s("span",{class:"line"},[s("span",{style:{color:"#79B8FF"}},"cd"),s("span",{style:{color:"#E1E4E8"}}," $HOME")],-1),Pe=a('<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data</span></span>',1),Ie=a('<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data</span></span>',1),Ve=a('<span class="line"><span style="color:#E1E4E8;">SNAP_NAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#9ECBFF;"> https://snaps.qubelabs.io/celestia/ </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\</span></span>',1),we={class:"line"},De=s("span",{style:{color:"#9ECBFF"}},"    ",-1),Re=s("span",{style:{color:"#B392F0"}},"egrep",-1),Ne=s("span",{style:{color:"#9ECBFF"}}," ",-1),xe=s("span",{style:{color:"#79B8FF"}},"-o",-1),$e={style:{color:"#9ECBFF"}},Oe=a('<span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">tr</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#9ECBFF;"> &quot;&gt;&quot;)</span>',6),Me=a('<span class="line"><span style="color:#B392F0;">aria2c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-x</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-snap.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://snaps.qubelabs.io/celestia/${</span><span style="color:#E1E4E8;">SNAP_NAME</span><span style="color:#9ECBFF;">}&quot;</span></span>',1),Le=a('<span class="line"><span style="color:#B392F0;">tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-snap.tar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-C</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/data/</span></span>',1),He={class:"shiki github-light vp-code-light"},Ue=s("span",{class:"line"},[s("span",{style:{color:"#005CC5"}},"cd"),s("span",{style:{color:"#24292E"}}," $HOME")],-1),We=a('<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data</span></span>',1),Ye=a('<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data</span></span>',1),Ge=a('<span class="line"><span style="color:#24292E;">SNAP_NAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-s</span><span style="color:#032F62;"> https://snaps.qubelabs.io/celestia/ </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\</span></span>',1),Ke={class:"line"},Qe=s("span",{style:{color:"#032F62"}},"    ",-1),ze=s("span",{style:{color:"#6F42C1"}},"egrep",-1),Xe=s("span",{style:{color:"#032F62"}}," ",-1),Ze=s("span",{style:{color:"#005CC5"}},"-o",-1),je={style:{color:"#032F62"}},Je=a('<span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">tr</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-d</span><span style="color:#032F62;"> &quot;&gt;&quot;)</span>',6),st=a('<span class="line"><span style="color:#6F42C1;">aria2c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-x</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-snap.tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://snaps.qubelabs.io/celestia/${</span><span style="color:#24292E;">SNAP_NAME</span><span style="color:#032F62;">}&quot;</span></span>',1),at=a('<span class="line"><span style="color:#6F42C1;">tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-snap.tar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-C</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/data/</span></span>',1),ot=a('<h2 id="start-the-consensus-node" tabindex="-1">Start the consensus node <a class="header-anchor" href="#start-the-consensus-node" aria-label="Permalink to &quot;Start the consensus node&quot;">​</a></h2><p>In order to start your full consensus node, run the following:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span></code></pre></div><p>Optional: If you would like celestia-app to run as a background process, you can follow the <a href="./systemd">SystemD tutorial</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Refer to <a href="./../nodes/celestia-node-troubleshooting#ports">the ports section of the celestia-node troubleshooting page</a> for information on which ports are required to be open on your machine.</p></div><h2 id="optional-setting-up-a-validator" tabindex="-1">Optional: Setting up a validator <a class="header-anchor" href="#optional-setting-up-a-validator" aria-label="Permalink to &quot;Optional: Setting up a validator&quot;">​</a></h2><h3 id="setting-up-a-celestia-validator-node" tabindex="-1">Setting up a Celestia validator node <a class="header-anchor" href="#setting-up-a-celestia-validator-node" aria-label="Permalink to &quot;Setting up a Celestia validator node&quot;">​</a></h3><p>Validator nodes allow you to participate in consensus in the Celestia network.</p><p><img src="'+i+`" alt="validator node"></p><h4 id="validator-hardware-requirements" tabindex="-1">Validator hardware requirements <a class="header-anchor" href="#validator-hardware-requirements" aria-label="Permalink to &quot;Validator hardware requirements&quot;">​</a></h4><p>The following hardware minimum requirements are recommended for running a validator node:</p><ul><li>Memory: <strong>8 GB RAM</strong></li><li>CPU: <strong>6 cores</strong></li><li>Disk: <strong>500 GB SSD Storage</strong></li><li>Bandwidth: <strong>1 Gbps for Download/1 Gbps for Upload</strong></li></ul><p>The following tutorial is done on an Ubuntu Linux 20.04 (LTS) x64 instance machine.</p><p>First, set up your full consensus node by following the instructions in <a href="#setting-up-a-full-consensus-node">the previous section</a>.</p><h4 id="wallet" tabindex="-1">Wallet <a class="header-anchor" href="#wallet" aria-label="Permalink to &quot;Wallet&quot;">​</a></h4><p>Follow <a href="./../nodes/celestia-app-wallet">the tutorial on creating a wallet</a>.</p><h4 id="delegate-stake-to-a-validator" tabindex="-1">Delegate stake to a validator <a class="header-anchor" href="#delegate-stake-to-a-validator" aria-label="Permalink to &quot;Delegate stake to a validator&quot;">​</a></h4><p>Create an environment variable for the address:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">VALIDATOR_WALLET</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">validator-wallet-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">VALIDATOR_WALLET</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">validator-wallet-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>If you want to delegate more stake to any validator, including your own you will need the <code>celesvaloper</code> address of the validator in question. You can run the command below to get the <code>celesvaloper</code> of your local validator wallet in case you want to delegate more to it:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">keys</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">show</span><span style="color:#E1E4E8;"> $VALIDATOR_WALLET </span><span style="color:#79B8FF;">--bech</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">val</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keys</span><span style="color:#24292E;"> </span><span style="color:#032F62;">show</span><span style="color:#24292E;"> $VALIDATOR_WALLET </span><span style="color:#005CC5;">--bech</span><span style="color:#24292E;"> </span><span style="color:#032F62;">val</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span></span></code></pre></div><p>After entering the wallet passphrase you should see a similar output:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Enter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">keyring</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passphrase:</span></span>
<span class="line"><span style="color:#B392F0;">celesvaloper1q3v5cugc8cdpud87u4zwy0a74uxkk6u43cv6hd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Enter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keyring</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passphrase:</span></span>
<span class="line"><span style="color:#6F42C1;">celesvaloper1q3v5cugc8cdpud87u4zwy0a74uxkk6u43cv6hd</span></span></code></pre></div><p>To delegate tokens to the <code>celestiavaloper</code> validator, as an example you can run:</p>`,24),nt={class:"language-bash vp-adaptive-theme"},et=s("button",{title:"Copy Code",class:"copy"},null,-1),tt=s("span",{class:"lang"},"bash",-1),lt={class:"shiki github-dark vp-code-dark"},pt=a('<span class="line"><span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">staking</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">delegate</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),ct=a('<span class="line"><span style="color:#E1E4E8;">celestiavaloper1q3v5cugc8cdpud87u4zwy0a74uxkk6u4q4gx4p </span><span style="color:#79B8FF;">1000000</span><span style="color:#9ECBFF;">utia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),it={class:"line"},rt=s("span",{style:{color:"#E1E4E8"}},"--from=$VALIDATOR_WALLET ",-1),_t={style:{color:"#79B8FF"}},dt=s("span",{style:{color:"#E1E4E8"}}," ",-1),ht=s("span",{style:{color:"#79B8FF"}},"\\",-1),yt=s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"--fees=21000utia")],-1),Et={class:"shiki github-light vp-code-light"},ut=a('<span class="line"><span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">staking</span><span style="color:#24292E;"> </span><span style="color:#032F62;">delegate</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),Ft=a('<span class="line"><span style="color:#24292E;">celestiavaloper1q3v5cugc8cdpud87u4zwy0a74uxkk6u4q4gx4p </span><span style="color:#005CC5;">1000000</span><span style="color:#032F62;">utia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),Ct={class:"line"},gt=s("span",{style:{color:"#24292E"}},"--from=$VALIDATOR_WALLET ",-1),Tt={style:{color:"#005CC5"}},bt=s("span",{style:{color:"#24292E"}}," ",-1),St=s("span",{style:{color:"#005CC5"}},"\\",-1),mt=s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"--fees=21000utia")],-1),At=a(`<p>If successful, you should see a similar output as:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">code: 0</span></span>
<span class="line"><span style="color:#79B8FF;">codespace: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">data: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">gas_used: &quot;0&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">gas_wanted: &quot;0&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">height: &quot;0&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">info: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">logs: []</span></span>
<span class="line"><span style="color:#79B8FF;">raw_log: &#39;[]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">timestamp: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">tx: null</span></span>
<span class="line"><span style="color:#79B8FF;">txhash: &lt;tx-hash&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">code: 0</span></span>
<span class="line"><span style="color:#005CC5;">codespace: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">data: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">gas_used: &quot;0&quot;</span></span>
<span class="line"><span style="color:#005CC5;">gas_wanted: &quot;0&quot;</span></span>
<span class="line"><span style="color:#005CC5;">height: &quot;0&quot;</span></span>
<span class="line"><span style="color:#005CC5;">info: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">logs: []</span></span>
<span class="line"><span style="color:#005CC5;">raw_log: &#39;[]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">timestamp: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">tx: null</span></span>
<span class="line"><span style="color:#005CC5;">txhash: &lt;tx-hash&gt;</span></span></code></pre></div><p>You can check if the TX hash went through using the block explorer by inputting the <code>txhash</code> ID that was returned.</p><h3 id="optional-deploy-the-celestia-node" tabindex="-1">Optional: Deploy the celestia-node <a class="header-anchor" href="#optional-deploy-the-celestia-node" aria-label="Permalink to &quot;Optional: Deploy the celestia-node&quot;">​</a></h3><p>Running a bridge node is critical to the Celestia network as it enables the data availability and consensus nodes to communicate with one another. It is recommended to support the data availability network, but is not required for <code>celestia-app</code>.</p><p>If you are not running a bridge node, you can skip to <a href="#run-the-validator-node">run a validator node</a>.</p><p>This section describes part 2 of Celestia validator node setup: running a Celestia bridge node daemon.</p><h4 id="install-celestia-node" tabindex="-1">Install celestia-node <a class="header-anchor" href="#install-celestia-node" aria-label="Permalink to &quot;Install celestia-node&quot;">​</a></h4><p>You can <a href="./celestia-node">follow the tutorial for installing <code>celestia-node</code></a></p><h4 id="initialize-the-bridge-node" tabindex="-1">Initialize the bridge node <a class="header-anchor" href="#initialize-the-bridge-node" aria-label="Permalink to &quot;Initialize the bridge node&quot;">​</a></h4><p>Run the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bridge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">UR</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bridge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">UR</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Refer to <a href="./../../nodes/celestia-node-troubleshooting/#ports">the ports section of the celestia-node troubleshooting page</a> for information on which ports are required to be open on your machine.</p></div><p>If you need a list of RPC endpoints to connect to, you can find the <a href="./mocha-testnet#rpc-endpoints">list on the Mocha testnet page</a> or <a href="./arabica-devnet#rpc-endpoints">list on the Arabica devnet page</a>.</p><h4 id="run-the-bridge-node" tabindex="-1">Run the bridge node <a class="header-anchor" href="#run-the-bridge-node" aria-label="Permalink to &quot;Run the bridge node&quot;">​</a></h4><p>Run the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bridge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bridge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span></code></pre></div><h4 id="optional-start-the-bridge-node-with-systemd" tabindex="-1">Optional: start the bridge node with SystemD <a class="header-anchor" href="#optional-start-the-bridge-node-with-systemd" aria-label="Permalink to &quot;Optional: start the bridge node with SystemD&quot;">​</a></h4><p>Follow <a href="./../systemd">the tutorial on setting up the bridge node as a background process with SystemD</a>.</p><p>You have successfully set up a bridge node that is syncing with the network.</p><h3 id="run-the-validator-node" tabindex="-1">Run the validator node <a class="header-anchor" href="#run-the-validator-node" aria-label="Permalink to &quot;Run the validator node&quot;">​</a></h3><p>In order to start your validator node, run the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span></code></pre></div><p>After completing all the necessary steps, you are now ready to run a validator! In order to create your validator onchain, follow the instructions below. Keep in mind that these steps are necessary ONLY if you want to participate in the consensus.</p><p>Pick a <code>moniker</code> name of your choice! This is the validator name that will show up on public dashboards and explorers. <code>VALIDATOR_WALLET</code> must be the same you defined previously. Parameter <code>--min-self-delegation=1000000</code> defines the amount of tokens that are self delegated from your validator wallet.</p><p>Now, connect to the network of your choice.</p><p>You have the following option of connecting to list of networks shown below:</p><p>Continuing the validator tutorial, here are the steps to connect your validator to Mocha:</p>`,28),vt={class:"language-bash vp-adaptive-theme"},ft=s("button",{title:"Copy Code",class:"copy"},null,-1),kt=s("span",{class:"lang"},"bash",-1),Bt={class:"shiki github-dark vp-code-dark"},qt=s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"MONIKER"),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#9ECBFF"}},'"your_moniker"')],-1),Pt=s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"VALIDATOR_WALLET"),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#9ECBFF"}},'"validator"')],-1),It=s("span",{class:"line"},null,-1),Vt=a('<span class="line"><span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">staking</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create-validator</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),wt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--amount=1000000utia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Dt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--pubkey=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">celestia-appd</span><span style="color:#9ECBFF;"> tendermint show-validator)</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Rt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--moniker=</span><span style="color:#E1E4E8;">$MONIKER</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Nt={class:"line"},xt=s("span",{style:{color:"#E1E4E8"}},"    ",-1),$t={style:{color:"#79B8FF"}},Ot=s("span",{style:{color:"#E1E4E8"}}," ",-1),Mt=s("span",{style:{color:"#79B8FF"}},"\\",-1),Lt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--commission-rate=0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Ht=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--commission-max-rate=0.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Ut=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--commission-max-change-rate=0.01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Wt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--min-self-delegation=1000000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Yt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--from=</span><span style="color:#E1E4E8;">$VALIDATOR_WALLET</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Gt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--keyring-backend=test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Kt=a('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--fees=21000utia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Qt=s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#79B8FF"}},"--gas=220000")],-1),zt={class:"shiki github-light vp-code-light"},Xt=s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"MONIKER"),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#032F62"}},'"your_moniker"')],-1),Zt=s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"VALIDATOR_WALLET"),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#032F62"}},'"validator"')],-1),jt=s("span",{class:"line"},null,-1),Jt=a('<span class="line"><span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">staking</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create-validator</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),sl=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--amount=1000000utia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),al=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--pubkey=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">celestia-appd</span><span style="color:#032F62;"> tendermint show-validator)</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),ol=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--moniker=</span><span style="color:#24292E;">$MONIKER</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),nl={class:"line"},el=s("span",{style:{color:"#24292E"}},"    ",-1),tl={style:{color:"#005CC5"}},ll=s("span",{style:{color:"#24292E"}}," ",-1),pl=s("span",{style:{color:"#005CC5"}},"\\",-1),cl=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--commission-rate=0.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),il=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--commission-max-rate=0.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),rl=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--commission-max-change-rate=0.01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),_l=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--min-self-delegation=1000000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),dl=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--from=</span><span style="color:#24292E;">$VALIDATOR_WALLET</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),hl=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--keyring-backend=test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),yl=a('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--fees=21000utia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),El=s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#005CC5"}},"--gas=220000")],-1),ul=a(`<p>You will be prompted to confirm the transaction:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">confirm transaction before signing and broadcasting [y/N]: y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">confirm transaction before signing and broadcasting [y/N]: y</span></span></code></pre></div><p>Inputting <code>y</code> should provide an output similar to:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">code: 0</span></span>
<span class="line"><span style="color:#79B8FF;">codespace: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">data: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">gas_used: &quot;0&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">gas_wanted: &quot;0&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">height: &quot;0&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">info: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">logs: []</span></span>
<span class="line"><span style="color:#79B8FF;">raw_log: &#39;[]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">timestamp: &quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">tx: null</span></span>
<span class="line"><span style="color:#79B8FF;">txhash: &lt;tx-hash&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">code: 0</span></span>
<span class="line"><span style="color:#005CC5;">codespace: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">data: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">gas_used: &quot;0&quot;</span></span>
<span class="line"><span style="color:#005CC5;">gas_wanted: &quot;0&quot;</span></span>
<span class="line"><span style="color:#005CC5;">height: &quot;0&quot;</span></span>
<span class="line"><span style="color:#005CC5;">info: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">logs: []</span></span>
<span class="line"><span style="color:#005CC5;">raw_log: &#39;[]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">timestamp: &quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">tx: null</span></span>
<span class="line"><span style="color:#005CC5;">txhash: &lt;tx-hash&gt;</span></span></code></pre></div><p>You should now be able to see your validator from <a href="./mocha-testnet#explorers">a block explorer</a></p><h3 id="submit-your-validator-information" tabindex="-1">Submit your validator information <a class="header-anchor" href="#submit-your-validator-information" aria-label="Permalink to &quot;Submit your validator information&quot;">​</a></h3><p>After starting your node, please submit your node as a seed and peer to the <a href="https://github.com/celestiaorg/networks" target="_blank" rel="noreferrer">networks repository</a>.</p><h2 id="extra-resources-for-consensus-nodes" tabindex="-1">Extra resources for consensus nodes <a class="header-anchor" href="#extra-resources-for-consensus-nodes" aria-label="Permalink to &quot;Extra resources for consensus nodes&quot;">​</a></h2><h3 id="optional-reset-network" tabindex="-1">Optional: Reset network <a class="header-anchor" href="#optional-reset-network" aria-label="Permalink to &quot;Optional: Reset network&quot;">​</a></h3><p>This will delete all data folders so we can start fresh:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia-appd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tendermint</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unsafe-reset-all</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--home</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/.celestia-app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia-appd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tendermint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unsafe-reset-all</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--home</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/.celestia-app</span></span></code></pre></div><h3 id="optional-configuring-an-rpc-endpoint" tabindex="-1">Optional: Configuring an RPC endpoint <a class="header-anchor" href="#optional-configuring-an-rpc-endpoint" aria-label="Permalink to &quot;Optional: Configuring an RPC endpoint&quot;">​</a></h3><p>You can configure your full consensus node to be a public RPC endpoint. This allows it to accept connections from data availability nodes and serve requests for the data availability API.</p><h4 id="expose-rpc" tabindex="-1">Expose RPC <a class="header-anchor" href="#expose-rpc" aria-label="Permalink to &quot;Expose RPC&quot;">​</a></h4><p>By default, the RPC service listens on <code>localhost</code> which means it can&#39;t be accessed from other machines. To make the RPC service available publicly, you need to bind it to a public IP or <code>0.0.0.0</code> (which means listening on all available network interfaces).</p><p>You can do this by editing the config.toml file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;s#&quot;tcp://127.0.0.1:26657&quot;#&quot;tcp://0.0.0.0:26657&quot;#g&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-app/config/config.toml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s#&quot;tcp://127.0.0.1:26657&quot;#&quot;tcp://0.0.0.0:26657&quot;#g&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-app/config/config.toml</span></span></code></pre></div><p>This command replaces the <code>localhost</code> IP address with <code>0.0.0.0</code>, making the RPC service listen on all available network interfaces.</p><h4 id="note-on-external-address" tabindex="-1">Note on <code>external-address</code> <a class="header-anchor" href="#note-on-external-address" aria-label="Permalink to &quot;Note on \`external-address\`&quot;">​</a></h4><p>The <code>external-address</code> field in the configuration is used when your node is behind a NAT and you need to advertise a different address for peers to dial. Populating this field is not necessary for making the RPC endpoint public.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">EXTERNAL-ADDRESS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">wget</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-qO-</span><span style="color:#9ECBFF;"> eth0.me)</span></span>
<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i.bak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;s/^external-address = &quot;&quot;/external-address = &quot;</span><span style="color:#E1E4E8;">$EXTERNAL</span><span style="color:#9ECBFF;">-ADDRESS:26656&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    $HOME</span><span style="color:#9ECBFF;">/.celestia-app/config/config.toml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EXTERNAL-ADDRESS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">wget</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-qO-</span><span style="color:#032F62;"> eth0.me)</span></span>
<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i.bak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;s/^external-address = &quot;&quot;/external-address = &quot;</span><span style="color:#24292E;">$EXTERNAL</span><span style="color:#032F62;">-ADDRESS:26656&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    $HOME</span><span style="color:#032F62;">/.celestia-app/config/config.toml</span></span></code></pre></div><h4 id="restart-the-node" tabindex="-1">Restart the node <a class="header-anchor" href="#restart-the-node" aria-label="Permalink to &quot;Restart the node&quot;">​</a></h4><p>After making these changes, restart <code>celestia-appd</code> to load the new configurations.</p><h3 id="optional-transaction-indexer-configuration-options" tabindex="-1">Optional: Transaction indexer configuration options <a class="header-anchor" href="#optional-transaction-indexer-configuration-options" aria-label="Permalink to &quot;Optional: Transaction indexer configuration options&quot;">​</a></h3><p>This section guides you on how to configure your <code>config.toml</code> file in <code>celestia-app</code> to select which transactions to index. Depending on the application&#39;s configuration, a node operator may decide which transactions to index.</p><p>The available options are:</p><ol><li><code>null</code>: This option disables indexing. If you don&#39;t need to query transactions, you can choose this option to save space.</li><li><code>kv</code> (default): This is the simplest indexer, backed by key-value storage (defaults to levelDB; see DBBackend). When <code>kv</code> is chosen, <code>tx.height</code> and <code>tx.hash</code> will always be indexed. This option is suitable for basic queries on transactions.</li><li><code>psql</code>: This indexer is backed by PostgreSQL. When psql is chosen, <code>tx.height</code> and <code>tx.hash</code> will always be indexed. This option is suitable for complex queries on transactions.</li></ol><p>An example to set the value to <code>kv</code> in <code>config.toml</code> is:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">indexer = </span><span style="color:#9ECBFF;">&quot;kv&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">indexer = </span><span style="color:#032F62;">&quot;kv&quot;</span></span></code></pre></div><p>Remember to restart <code>celestia-appd</code> after making changes to the configuration to load the new settings.</p><h3 id="optional-discard-abci-responses-configuration" tabindex="-1">Optional: Discard ABCI responses configuration <a class="header-anchor" href="#optional-discard-abci-responses-configuration" aria-label="Permalink to &quot;Optional: Discard ABCI responses configuration&quot;">​</a></h3><p>This section will guide you on how to configure your <code>config.toml</code> file in <code>celestia-app</code> to manage the storage of ABCI responses. ABCI responses are the results of executing transactions and are used for <code>/block_results</code> RPC queries and to reindex events in the command-line tool.</p><p>The <code>discard_abci_responses</code> option allows you to control whether these responses are persisted in the state store:</p><ul><li><code>false</code> (default): ABCI responses are stored in the state store. This ensures that ABCI responses are available for <code>/block_results</code> RPC queries and for reindexing events. However, it can consume a significant amount of disk space.</li><li><code>true</code>: ABCI responses are not stored in the state store. This can save a considerable amount of disk space, but <code>/block_results</code> RPC queries and event reindexing will not be available.</li></ul><p>An example to set the value to false in <code>config.toml</code> is:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">discard_abci_responses = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">discard_abci_responses = </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>Remember to restart <code>celestia-appd</code> after making changes to the configuration to load the new settings.</p>`,37),ml=JSON.parse('{"title":"Setting up a Celestia full consensus node","description":"Learn how to set up a Celestia consensus node.","frontmatter":{"description":"Learn how to set up a Celestia consensus node.","outline":"deep","head":[["meta",{"name":"og:title","content":"Setting up a Celestia full consensus node | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"nodes/consensus-node.md","filePath":"nodes/consensus-node.md","lastUpdated":1711430246000}'),Fl={name:"nodes/consensus-node.md"},Al=Object.assign(Fl,{setup(Cl){return(gl,Tl)=>(l(),p("div",null,[r,s("div",_,[d,s("div",h,[s("div",y,[E,u,s("pre",F,[s("code",null,[s("span",C,[g,s("span",T,e(t(n).mainnetChainId),1)])])]),s("pre",b,[s("code",null,[s("span",S,[m,s("span",A,e(t(n).mainnetChainId),1)])])])]),s("div",v,[f,k,s("pre",B,[s("code",null,[s("span",q,[P,s("span",I,e(t(n).mochaChainId),1)])])]),s("pre",V,[s("code",null,[s("span",w,[D,s("span",R,e(t(n).mochaChainId),1)])])])]),s("div",N,[x,$,s("pre",O,[s("code",null,[s("span",M,[L,s("span",H,e(t(n).arabicaChainId),1)])])]),s("pre",U,[s("code",null,[s("span",W,[Y,s("span",G,e(t(n).arabicaChainId),1)])])])])])]),K,s("div",Q,[z,s("div",X,[s("div",Z,[j,J,s("pre",ss,[s("code",null,[s("span",as,[os,ns,es,ts,s("span",ls,e(t(n).mainnetChainId),1)])])]),s("pre",ps,[s("code",null,[s("span",cs,[is,rs,_s,ds,s("span",hs,e(t(n).mainnetChainId),1)])])])]),s("div",ys,[Es,us,s("pre",Fs,[s("code",null,[s("span",Cs,[gs,Ts,bs,Ss,s("span",ms,e(t(n).mochaChainId),1)])])]),s("pre",As,[s("code",null,[s("span",vs,[fs,ks,Bs,qs,s("span",Ps,e(t(n).mochaChainId),1)])])])]),s("div",Is,[Vs,ws,s("pre",Ds,[s("code",null,[s("span",Rs,[Ns,xs,$s,Os,s("span",Ms,e(t(n).arabicaChainId),1)])])]),s("pre",Ls,[s("code",null,[s("span",Hs,[Us,Ws,Ys,Gs,s("span",Ks,e(t(n).arabicaChainId),1)])])])])])]),Qs,s("div",zs,[Xs,s("div",Zs,[s("div",js,[Js,sa,s("pre",aa,[s("code",null,[s("span",oa,[na,s("span",ea," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mainnetChainId)+"/seeds.txt ",1),ta,la,pa,ca]),o(`
`),ia,o(`
`),ra])]),s("pre",_a,[s("code",null,[s("span",da,[ha,s("span",ya," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mainnetChainId)+"/seeds.txt ",1),Ea,ua,Fa,Ca]),o(`
`),ga,o(`
`),Ta])])]),s("div",ba,[Sa,ma,s("pre",Aa,[s("code",null,[s("span",va,[fa,s("span",ka," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mochaChainId)+"/seeds.txt ",1),Ba,qa,Pa,Ia]),o(`
`),Va,o(`
`),wa])]),s("pre",Da,[s("code",null,[s("span",Ra,[Na,s("span",xa," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mochaChainId)+"/seeds.txt ",1),$a,Oa,Ma,La]),o(`
`),Ha,o(`
`),Ua])])]),Wa])]),Ya,Ga,s("div",Ka,[Qa,s("div",za,[s("div",Xa,[Za,ja,s("pre",Ja,[s("code",null,[s("span",so,[ao,s("span",oo," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mainnetChainId)+"/peers.txt ",1),no,eo,to,lo]),o(`
`),po,o(`
`),co])]),s("pre",io,[s("code",null,[s("span",ro,[_o,s("span",ho," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mainnetChainId)+"/peers.txt ",1),yo,Eo,uo,Fo]),o(`
`),Co,o(`
`),go])])]),s("div",To,[bo,So,s("pre",mo,[s("code",null,[s("span",Ao,[vo,s("span",fo," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mochaChainId)+"/peers.txt ",1),ko,Bo,qo,Po]),o(`
`),Io,o(`
`),Vo])]),s("pre",wo,[s("code",null,[s("span",Do,[Ro,s("span",No," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).mochaChainId)+"/peers.txt ",1),xo,$o,Oo,Mo]),o(`
`),Lo,o(`
`),Ho])])]),s("div",Uo,[Wo,Yo,s("pre",Go,[s("code",null,[s("span",Ko,[Qo,s("span",zo," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).arabicaChainId)+"/peers.txt ",1),Xo,Zo,jo,Jo]),o(`
`),sn,o(`
`),an])]),s("pre",on,[s("code",null,[s("span",nn,[en,s("span",tn," https://raw.githubusercontent.com/celestiaorg/networks/master/"+e(t(n).arabicaChainId)+"/peers.txt ",1),ln,pn,cn,rn]),o(`
`),_n,o(`
`),dn])])])])]),hn,s("div",yn,[En,s("div",un,[s("div",Fn,[Cn,gn,s("pre",Tn,[s("code",null,[bn,o(`
`),Sn,o(`
`),mn,o(`
`),An,o(`
`),s("span",vn,[fn,kn,Bn,qn,s("span",Pn,' ">'+e(t(n).mainnetChainId)+'.*tar" ',1),In]),o(`
`),Vn,o(`
`),wn])]),s("pre",Dn,[s("code",null,[Rn,o(`
`),Nn,o(`
`),xn,o(`
`),$n,o(`
`),s("span",On,[Mn,Ln,Hn,Un,s("span",Wn,' ">'+e(t(n).mainnetChainId)+'.*tar" ',1),Yn]),o(`
`),Gn,o(`
`),Kn])])]),s("div",Qn,[zn,Xn,s("pre",Zn,[s("code",null,[jn,o(`
`),Jn,o(`
`),se,o(`
`),ae,o(`
`),s("span",oe,[ne,ee,te,le,s("span",pe,' ">'+e(t(n).mochaChainId)+'.*tar" ',1),ce]),o(`
`),ie,o(`
`),re])]),s("pre",_e,[s("code",null,[de,o(`
`),he,o(`
`),ye,o(`
`),Ee,o(`
`),s("span",ue,[Fe,Ce,ge,Te,s("span",be,' ">'+e(t(n).mochaChainId)+'.*tar" ',1),Se]),o(`
`),me,o(`
`),Ae])])]),s("div",ve,[fe,ke,s("pre",Be,[s("code",null,[qe,o(`
`),Pe,o(`
`),Ie,o(`
`),Ve,o(`
`),s("span",we,[De,Re,Ne,xe,s("span",$e,' ">'+e(t(n).arabicaChainId)+'.*tar" ',1),Oe]),o(`
`),Me,o(`
`),Le])]),s("pre",He,[s("code",null,[Ue,o(`
`),We,o(`
`),Ye,o(`
`),Ge,o(`
`),s("span",Ke,[Qe,ze,Xe,Ze,s("span",je,' ">'+e(t(n).arabicaChainId)+'.*tar" ',1),Je]),o(`
`),st,o(`
`),at])])])])]),ot,s("div",nt,[et,tt,s("pre",lt,[s("code",null,[pt,o(`
`),ct,o(`
`),s("span",it,[rt,s("span",_t,"--chain-id="+e(t(n).mochaChainId),1),dt,ht]),o(`
`),yt])]),s("pre",Et,[s("code",null,[ut,o(`
`),Ft,o(`
`),s("span",Ct,[gt,s("span",Tt,"--chain-id="+e(t(n).mochaChainId),1),bt,St]),o(`
`),mt])])]),At,s("div",vt,[ft,kt,s("pre",Bt,[s("code",null,[qt,o(`
`),Pt,o(`
`),It,o(`
`),Vt,o(`
`),wt,o(`
`),Dt,o(`
`),Rt,o(`
`),s("span",Nt,[xt,s("span",$t,"--chain-id="+e(t(n).mochaChainId),1),Ot,Mt]),o(`
`),Lt,o(`
`),Ht,o(`
`),Ut,o(`
`),Wt,o(`
`),Yt,o(`
`),Gt,o(`
`),Kt,o(`
`),Qt])]),s("pre",zt,[s("code",null,[Xt,o(`
`),Zt,o(`
`),jt,o(`
`),Jt,o(`
`),sl,o(`
`),al,o(`
`),ol,o(`
`),s("span",nl,[el,s("span",tl,"--chain-id="+e(t(n).mochaChainId),1),ll,pl]),o(`
`),cl,o(`
`),il,o(`
`),rl,o(`
`),_l,o(`
`),dl,o(`
`),hl,o(`
`),yl,o(`
`),El])])]),ul]))}});export{ml as __pageData,Al as default};
